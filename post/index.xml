<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on blogzam</title><link>https://blogzam.js.org/post/</link><description>Recent content in Posts on blogzam</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 01 May 2021 15:13:46 +0700</lastBuildDate><atom:link href="https://blogzam.js.org/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Object Prptotype</title><link>https://blogzam.js.org/post/1.3.prototype/</link><pubDate>Sat, 01 May 2021 15:13:46 +0700</pubDate><guid>https://blogzam.js.org/post/1.3.prototype/</guid><description>prototype / prototyple inheritence function Product(nama, energi){ this.nama = nama; this.energi = energi; } Product.prototype.makan = function(porsi){ this.energi += porsi; return `hallo ${this.nama}selamat makan`; } Product.prototype.main = function(jam){ this.energi -=jam; return `hallo ${this.nama}selamat main`; } Product.prototype.tidur = function(jam){ this.energi +=jam * 2; return `hallo ${this.nama}selamat tidur`; } let honda = new Product(&amp;#39;Honda&amp;#39;, 20); mengubah ke kelas / versi kelas
class Product{ constructor(nama, energi){ this.nama = nama; this.energi = energi; } makan(porsi){ this.</description></item><item><title>Arrow Function</title><link>https://blogzam.js.org/post/3.1.arrow-function/</link><pubDate>Mon, 01 Mar 2021 15:13:46 +0700</pubDate><guid>https://blogzam.js.org/post/3.1.arrow-function/</guid><description>Function deklaration function tampilPesan(nama){ console.log(`hallo $ {nama}`); } tampilPesan(&amp;#39;kapet&amp;#39;); function expression let tampilNama = function(nama){ console.log(&amp;#39;halo&amp;#39; + nama); } tampilNama(&amp;#39;kapeeet&amp;#39;); arrow function bentuk lain yang lebih ringkas dari function expression const tampilNama = (nama) =&amp;gt; { returm &amp;#39;hallo&amp;#39; + nama; } console.log(tampilNama(&amp;#39;petpet&amp;#39;)); atau jika return hanya satu baris bisa di singakt , return di hapus, kurung kurawal di hapus dan parameter hanya satu bisa hilangkan kurung
// implisit return const tampilNama = nama =&amp;gt; &amp;#39;hallo&amp;#39; + nama; console.</description></item><item><title>Closures</title><link>https://blogzam.js.org/post/2.2.closures/</link><pubDate>Mon, 01 Mar 2021 15:13:46 +0700</pubDate><guid>https://blogzam.js.org/post/2.2.closures/</guid><description>closures closures merupakan kombinasi antara functio dengan lexical scope di dalam functio tsb.(mdn)
function mereturn function (code fellow)
sebuah function yang yang sebelumnya dsudah memiliki data hasil dari function yang lain
function di dalam function yang membutuhkan variable global dan variable parrent memngembalikan function
lexical scope function init(){ let nama = &amp;#39;kapet&amp;#39;; // variabel lokal function tampilNama(){ //inner function(closure) console.</description></item><item><title>Execution Context, Hoisting, Scope</title><link>https://blogzam.js.org/post/2.1.execution-context-hoisting-scope/</link><pubDate>Mon, 01 Mar 2021 15:13:46 +0700</pubDate><guid>https://blogzam.js.org/post/2.1.execution-context-hoisting-scope/</guid><description>Closures 2 fase exexcution context createion exexcution console.log(nama); var nama = &amp;#39;ilzam&amp;#39;; terjadi fase creation oada global kontext ada var di isi undifinend ada function di isi function itu sendiri terjadi hoisting mendefinisikan object window sebagai object globalg mendefinisiakn window sebagi this fase exexcution
console.log(sayHello); var nama = &amp;#39;ilzam afif&amp;#39;; var umur = 16; function sayHello(){ return `hai nama saya ${nama}saya berumur ${umur}tahun`; } kalo ketemu function seloalh membuat local exexcution context yang didalmnya terdapat creation exexcution contex (akses window dan argument) ada hoisting lokal</description></item><item><title>Internet Dan Teknologi Web</title><link>https://blogzam.js.org/post/internet-dan-teknologi-web/</link><pubDate>Mon, 01 Mar 2021 15:13:46 +0700</pubDate><guid>https://blogzam.js.org/post/internet-dan-teknologi-web/</guid><description>Website HTTP WWW Web Browser Web server Web Hosting Nama Domain Istilah dalam Web Tools Pendukung Website Website adalah sebuah halaman yang menampilkan informasi melalui teks atau gambar yang dapat diakses melalui internet menggunakan browser.
HTTP Server HTTP Server merupakan sebuah software yang dapat menerima transaksi dari HyperText Transfer Protocol dalam suatu website atau biasa disebut dengan &amp;ldquo;HTTP SERVER&amp;rdquo;.
WWW WWW adalah kumpulan sumber daya internet (seperti FTP, telnet, Usenet), teks hyperlink, file audio, dan video, dan situs jarak jauh yang dapat diakses dan dicari oleh browser berdasarkan standar seperti HTTP dan TCP / IP.</description></item><item><title>Object Create</title><link>https://blogzam.js.org/post/1.2.object-create/</link><pubDate>Mon, 01 Mar 2021 15:13:46 +0700</pubDate><guid>https://blogzam.js.org/post/1.2.object-create/</guid><description>object.create const methodProduct = { makan: function(porsi){ this.energi += porsi; console.log(`ini ${this.nama}`); }, main: function(jam){ this.energi -= jam; console.log(`ini ${this.nama}main sana`); }, service: function(jam){ this.energi += jam * 2; console.log(`ini ${this.nama}main sana`); } }; function Product(nama, energi){ let product = Object.create(methodProduct); product.nama = nama; product.energi = energi; return product; } let honda = Product(&amp;#39;Honda&amp;#39;, 20);</description></item><item><title>Object Reverse</title><link>https://blogzam.js.org/post/1.1.object-reverse/</link><pubDate>Mon, 01 Mar 2021 15:13:46 +0700</pubDate><guid>https://blogzam.js.org/post/1.1.object-reverse/</guid><description>konsep javascript baru dan kompleks
Prototype (konsep object) membuat object pada javascript
object literal function declaration constructor function (new) object.create object literal let product = { nama: &amp;#39;mobil&amp;#39;, energi: 10, makan: function(porsi){ this.energi += porsi; console.log(`Selamat datang ${this.nama}`) } } problem : tidak efektif untuk object yang banyak 2.function declaration
function Product(nama, energi){ let product = {}; product.nama = nama; product.energi = energi; product.makan = function(porsi){ this.</description></item></channel></rss>