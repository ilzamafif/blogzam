<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Blogzam</title><link>/post/</link><description>Recent content in Posts on Blogzam</description><generator>Hugo -- gohugo.io</generator><language>id-ID</language><lastBuildDate>Fri, 24 Sep 2021 11:48:18 +0000</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Membuat Image Dengan Dockerfile</title><link>/membuat-image-dengan-dockerfile/</link><pubDate>Fri, 24 Sep 2021 11:48:18 +0000</pubDate><guid>/membuat-image-dengan-dockerfile/</guid><description>membuat container
melihat daftar container yang berjalan docker container ls melihat daftar container yang berjalan dan tidak docker container ls &amp;ndash;all membuat container docker container create &amp;ndash;name [nama container] [nama image]:[dan tags] &amp;ndash; menjalankan docker container start [nama container] &amp;ndash; menghapus berhentikan docker container stop [nama container] menghapus docker container rm [nama container] &amp;ndash; membuka port untuk container
docker container create &amp;ndash;name [nana container] -p [port:port container] [nama image]:[dan tags] &amp;ndash; menghapus image</description></item><item><title>Object Prptotype</title><link>/1.3.prototype/</link><pubDate>Sat, 01 May 2021 15:13:46 +0700</pubDate><guid>/1.3.prototype/</guid><description>prototype / prototyple inheritence function Product(nama, energi){ this.nama = nama; this.energi = energi; } Product.prototype.makan = function(porsi){ this.energi += porsi; return `hallo ${this.nama}selamat makan`; } Product.prototype.main = function(jam){ this.energi -=jam; return `hallo ${this.nama}selamat main`; } Product.prototype.tidur = function(jam){ this.energi +=jam * 2; return `hallo ${this.nama}selamat tidur`; } let honda = new Product(&amp;#39;Honda&amp;#39;, 20); mengubah ke kelas / versi kelas
class Product{ constructor(nama, energi){ this.nama = nama; this.energi = energi; } makan(porsi){ this.</description></item><item><title>Arrow Function</title><link>/3.1.arrow-function/</link><pubDate>Mon, 01 Mar 2021 15:13:46 +0700</pubDate><guid>/3.1.arrow-function/</guid><description>Function deklaration function tampilPesan(nama){ console.log(`hallo $ {nama}`); } tampilPesan(&amp;#39;kapet&amp;#39;); function expression let tampilNama = function(nama){ console.log(&amp;#39;halo&amp;#39; + nama); } tampilNama(&amp;#39;kapeeet&amp;#39;); arrow function bentuk lain yang lebih ringkas dari function expression const tampilNama = (nama) =&amp;gt; { returm &amp;#39;hallo&amp;#39; + nama; } console.log(tampilNama(&amp;#39;petpet&amp;#39;)); atau jika return hanya satu baris bisa di singakt , return di hapus, kurung kurawal di hapus dan parameter hanya satu bisa hilangkan kurung
// implisit return const tampilNama = nama =&amp;gt; &amp;#39;hallo&amp;#39; + nama; console.</description></item><item><title>Closures</title><link>/2.2.closures/</link><pubDate>Mon, 01 Mar 2021 15:13:46 +0700</pubDate><guid>/2.2.closures/</guid><description>closures closures merupakan kombinasi antara functio dengan lexical scope di dalam functio tsb.(mdn)
function mereturn function (code fellow)
sebuah function yang yang sebelumnya dsudah memiliki data hasil dari function yang lain
function di dalam function yang membutuhkan variable global dan variable parrent memngembalikan function
lexical scope function init(){ let nama = &amp;#39;kapet&amp;#39;; // variabel lokal function tampilNama(){ //inner function(closure) console.</description></item><item><title>Execution Context, Hoisting, Scope</title><link>/2.1.execution-context-hoisting-scope/</link><pubDate>Mon, 01 Mar 2021 15:13:46 +0700</pubDate><guid>/2.1.execution-context-hoisting-scope/</guid><description>Closures 2 fase exexcution context createion exexcution console.log(nama); var nama = &amp;#39;ilzam&amp;#39;; terjadi fase creation oada global kontext ada var di isi undifinend ada function di isi function itu sendiri terjadi hoisting mendefinisikan object window sebagai object globalg mendefinisiakn window sebagi this fase exexcution
console.log(sayHello); var nama = &amp;#39;ilzam afif&amp;#39;; var umur = 16; function sayHello(){ return `hai nama saya ${nama}saya berumur ${umur}tahun`; } kalo ketemu function seloalh membuat local exexcution context yang didalmnya terdapat creation exexcution contex (akses window dan argument) ada hoisting lokal</description></item><item><title>High Order Function</title><link>/4.1.high-order-function/</link><pubDate>Mon, 01 Mar 2021 15:13:46 +0700</pubDate><guid>/4.1.high-order-function/</guid><description>High Order Function function yang beroprasi di dalam function lain baik di gunakan di dalam argumen, maupun sgb return falue (eloquentjavascript.net) di dalam javascript : Frist Class function / inti dari javasript adalah function di dalam javascript function di perlakukan sbg objek objek == value tipe data, function == tipe data function kerjakanTgs(mapel, selesai){ conole.log(`${mapel}`); selesai(); } function selesai(){ alert(&amp;#39;selesai&amp;#39;); } // ket : function kerjakanTgs = high order Function //selsesai = callback setTimeout(function(){ console.</description></item><item><title>Internet Dan Teknologi Web</title><link>/internet-dan-teknologi-web/</link><pubDate>Mon, 01 Mar 2021 15:13:46 +0700</pubDate><guid>/internet-dan-teknologi-web/</guid><description>Website HTTP WWW Web Browser Web server Web Hosting Nama Domain Istilah dalam Web Tools Pendukung Website Website adalah sebuah halaman yang menampilkan informasi melalui teks atau gambar yang dapat diakses melalui internet menggunakan browser.
HTTP Server HTTP Server merupakan sebuah software yang dapat menerima transaksi dari HyperText Transfer Protocol dalam suatu website atau biasa disebut dengan &amp;ldquo;HTTP SERVER&amp;rdquo;.
WWW WWW adalah kumpulan sumber daya internet (seperti FTP, telnet, Usenet), teks hyperlink, file audio, dan video, dan situs jarak jauh yang dapat diakses dan dicari oleh browser berdasarkan standar seperti HTTP dan TCP / IP.</description></item><item><title>Map Filter Reduce</title><link>/4.2.map-filter-reduce/</link><pubDate>Mon, 01 Mar 2021 15:13:46 +0700</pubDate><guid>/4.2.map-filter-reduce/</guid><description>map filter reduce merupakan prototype array ketiganya menghasilkan areay baru contoh lain find, foreach dll const angka = [4,5,-6,8,7,-4,-5,-1,9]; // mencari angka &amp;lt;= 5 //for const newAngka = []; for (let i = 0; i &amp;lt; angka.length; i++) { if(angka[i] &amp;gt;= 5){ newAngka.push(angka[i]) } } //console.log(newAngka) // menggunakan filter const angkaBaru = angka.filter(a =&amp;gt; a &amp;gt;= 5 ); console.log(newAngka); // map // kalikam angka dengan angka 2 const kalikanAngka = angka.</description></item><item><title>My sql</title><link>/my-sql/</link><pubDate>Mon, 01 Mar 2021 15:13:46 +0700</pubDate><guid>/my-sql/</guid><description>halo teman teman saya ilzam afif di content kali ini kita akan belajar RDBMS MySQL
pertama kita akan bahas cara install mysql langsung aja untuk windows
&amp;hellip;
setelah terinstall kita konfigirasi path
&amp;hellip;.
untuk memastikan terinstall dengan baik kita cek dengan mysql &amp;ndash;version
untuk login ketikkan mysql -u root -p
database untuk melihat semua database di mysql show databases; untuk membuat database create database nama_databse
memilih database : use nama_database</description></item><item><title>Object Create</title><link>/1.2.object-create/</link><pubDate>Mon, 01 Mar 2021 15:13:46 +0700</pubDate><guid>/1.2.object-create/</guid><description>object.create const methodProduct = { makan: function(porsi){ this.energi += porsi; console.log(`ini ${this.nama}`); }, main: function(jam){ this.energi -= jam; console.log(`ini ${this.nama}main sana`); }, service: function(jam){ this.energi += jam * 2; console.log(`ini ${this.nama}main sana`); } }; function Product(nama, energi){ let product = Object.create(methodProduct); product.nama = nama; product.energi = energi; return product; } let honda = Product(&amp;#39;Honda&amp;#39;, 20);</description></item><item><title>Object Reverse</title><link>/1.1.object-reverse/</link><pubDate>Mon, 01 Mar 2021 15:13:46 +0700</pubDate><guid>/1.1.object-reverse/</guid><description>konsep javascript baru dan kompleks
Prototype (konsep object) membuat object pada javascript
object literal function declaration constructor function (new) object.create object literal let product = { nama: &amp;#39;mobil&amp;#39;, energi: 10, makan: function(porsi){ this.energi += porsi; console.log(`Selamat datang ${this.nama}`) } } problem : tidak efektif untuk object yang banyak 2.function declaration
function Product(nama, energi){ let product = {}; product.nama = nama; product.energi = energi; product.makan = function(porsi){ this.</description></item><item><title>Pendahuluan</title><link>/1.pendahuluan-1/</link><pubDate>Mon, 01 Mar 2021 15:13:46 +0700</pubDate><guid>/1.pendahuluan-1/</guid><description>Pendahuluan pola aesitektur pada perancangan perangkat lunak berorientasi objek komponen utamanya model(data), view(tampilan), controller(proses) controller perantara antara view dan model menangani pemrosesan pada aplikasi menangani kasi dari user viw output, apa yang dilihat usee representasi visual dari model lapisan presentasi model representasi pengetahuan mengelola data logika bisnis kenapa
memisahakan antara tampilan data dan proses/logoc organisasi dan struktur kode perawatan kode / maintance implemenrasi oop di gunakan banyak web aplication framework php</description></item><item><title>persiapan</title><link>/2.persiapan/</link><pubDate>Mon, 01 Mar 2021 15:13:46 +0700</pubDate><guid>/2.persiapan/</guid><description>php-mvc app/ controllers/ views/ models/ core/ App.php Controller.php init.php public/ index.php assets/ css/ js/ img/ file index.php
&amp;lt;?php require_once &amp;#34;../app/init.php&amp;#34; file init.php
&amp;lt;?php require_once &amp;#34;core/App.php&amp;#34; require_once &amp;#34;core/Controller.php&amp;#34; file App.php
&amp;lt;?php class App { } file Controller.php
&amp;lt;?php class Controller { } file index.php
&amp;lt;?php require_once &amp;#34;../app/init.php&amp;#34; $app = new App; file App.php
&amp;lt;?php class App { public function __construct() { echo &amp;#34;oke&amp;#34;; } }</description></item><item><title>routing</title><link>/3.routing/</link><pubDate>Mon, 01 Mar 2021 15:13:46 +0700</pubDate><guid>/3.routing/</guid><description>file App.php
&amp;lt;?php class App { public function __construct() { $url = $this-&amp;gt;parseURL(); } public function parseURL() { if(isset($_GET[&amp;#39;url]){ $url = rtrim($_GET[&amp;#39;url&amp;#39;], &amp;#39;/&amp;#39;); // menghilangkan / di akhir $url = filter_var($url, FILTER_SANITIZE_URL); // menhilangkan karakter aneh $url = explode(&amp;#39;/&amp;#39;, $url); // pecah url / dan di hilangkan return $url; } } } membuat file app/.htaccess
Options -Indexes membuat file public/.htaccess
Options -Multiviews RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !</description></item><item><title>Tagged Tamplate Literal</title><link>/5.2.tagged-template-literal/</link><pubDate>Mon, 01 Mar 2021 15:13:46 +0700</pubDate><guid>/5.2.tagged-template-literal/</guid><description>tagged tamplate Literal bentuk yang lebih kompleks dari template literal, memungkinkan kita untuk membaca tempalate literal melalui sebuah function di gunakan untuk
escaping HTML tags tramslation &amp;amp; internationalization style components //tagged template const nama = &amp;#39;kapet&amp;#39;; const umur = 16; function coba(strings, ...values){ let result = &amp;#39;&amp;#39;; strings.forEach(str, i{ result += `${str}${values[i] || &amp;#39;&amp;#39;}`; }) } // string untuk mengambil stting // ...values untuk mengambil array exprrssion const str = coba`hallo nama saya ${nama}saya berumur ${umur}.</description></item><item><title>Template Literal</title><link>/5.1.template-literal/</link><pubDate>Mon, 01 Mar 2021 15:13:46 +0700</pubDate><guid>/5.1.template-literal/</guid><description>template literal atau template string template literal adalah string literal yang memungkinkan adanya expression di dalamnya (MDN web docs) menggunakan bavk tick multiline string embeded expression HTML fregments expression interpolation tagged template string litetal let nama = &amp;#39;ilzam&amp;#39; // single quote let nama = &amp;#34;ilzam&amp;#34; // double quote let nama = `ilzam` // back tick template literal ` string string string` // multiline string `string ${expression}` // `embeded expression tag `string ${expression}` //taged template</description></item><item><title>This Pada Arrow Function</title><link>/3.2.this-pada-arrow-function/</link><pubDate>Mon, 01 Mar 2021 15:13:46 +0700</pubDate><guid>/3.2.this-pada-arrow-function/</guid><description>This pada arrow function arrow function tidak memiliki konsep this tidak bisa membuat constructor function dengan arrow function. constructor function const Siswa = function(){ this.nama = &amp;#39;pet&amp;#39;, this.umur = 16, //console.log(this); this.sayHello = function(){ console.log(`hallo ${this.nama}umur ${this.umur}`) } } const pet = new Siswa(); konteks this pada constructor function mengacu ke objek objek literal const mhs1 = { nama: &amp;#39;petpet&amp;#39;, umur: 16, say : function() { // console.</description></item></channel></rss>